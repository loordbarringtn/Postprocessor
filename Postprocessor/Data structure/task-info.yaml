type: remote_edu
files:
  - name: test/__init__.py
    visible: false
    learner_created: false
  - name: test/tests.py
    visible: false
    text: |
      from hstest import *
      import random
      import string
      import os
      
      
      class Test(StageTest):
          def random_word(self, length):
              letters = string.ascii_lowercase
              capital_letter = random.choice(string.ascii_uppercase)
              return capital_letter + ''.join(random.choice(letters) for i in range(length))
      
          def random_password(self):
              buffer = string.ascii_lowercase + string.digits
              return ''.join(random.sample(buffer, 8))
      
          def create_file(self):
              with open("database.csv", "a") as file:
                  file.write('id, nickname, password, consent to mailing')
                  for index in range(1, 101):
                      name = random.choice([self.random_word(8), '-'])
                      password = self.random_password()
                      mailing = random.choice(['yes', 'no', '-'])
                      line = f'\n{index}, {name}, {password}, {mailing}'
                      file.write(line)
      
          @dynamic_test()
          def test(self):
              random.seed(88)
      
              if not os.path.isfile('database.csv'):
                  self.create_file()
      
              with open('database.csv') as f:
                  lines = [line.strip('\n').split(', ') for line in f if len(line) > 1]
                  if len(lines) < 101:
                      open('database.csv', 'w').close()
                      self.create_file()
                      lines = [line.strip('\n').split(', ') for line in f if len(line) > 1]
                  last_index = int(lines[-1][0])
      
              csv_index = last_index + 1
              csv_name = random.choice([self.random_word(8), '-'])
              csv_password = self.random_password()
              csv_mailing = random.choice(['yes', 'no', '-'])
      
              csv_row = f'\n{csv_index}, {csv_name}, {csv_password}, {csv_mailing}'
      
              with open('database.csv', 'a') as fd:
                  fd.write(csv_row)
      
              main = TestedProgram()
              output = main.start()
      
              if csv_name not in output:
                  return CheckResult.wrong(f'Your program print {output},'
                                           f' but expected {csv_name} nickname of user in the output.')
      
              if csv_mailing not in output:
                  return CheckResult.wrong(f'Your program print "{output}",'
                                           f' but expected "{csv_mailing}" consent to mailing status in the output.')
              if output.count('\n') > 1:
                  return CheckResult.wrong(f'It looks like you typed multiple lines when one is required,'
                                           f' or you used too many "\\n" characters')
              if len(output) > 100:
                  return CheckResult.wrong(f'It looks like your program is outputting too many characters, even though'
                                           f' it takes significantly fewer characters to write one line with data.')
      
              with open("database.csv", "r") as f:
                  lines = f.readlines()
              with open("database.csv", "w") as f:
                  f.write('id, nickname, password, consent to mailing\n')
              with open("database.csv", "a") as f:
                  for line in lines[1:last_index + 1]:
                      if line == lines[last_index]:
                          f.write(line.strip('\n'))
                      else:
                          f.write(line)
      
              return CheckResult.correct()
      
      
      if __name__ == '__main__':
          Test().run_tests()
    learner_created: false
  - name: database.csv
    visible: true
    text: |-
      id, nickname, password, consent to mailing
      1, Mgkfuaqyw, v3iohwet, yes
      2, -, vdjp25gh, yes
      3, -, 6y49ep5m, yes
      4, Eenjwuaed, ysvn1lqa, no
      5, -, t17v0pbu, no
      6, -, sfdtjblr, yes
      7, -, c6i4tv53, no
      8, Cwjqsogix, cukmy3t5, yes
      9, Pqxmswwmh, txuz8lom, -
      10, Umzrktmfj, xlt5unq9, -
      11, Ysngakeaf, 2ztnuoep, -
      12, -, 7dhtkc39, no
      13, -, 0atpicmb, -
      14, -, 0281h5dn, no
      15, -, uglx3t84, no
      16, -, byp1h3ja, no
      17, -, muaxvjtp, -
      18, -, 68knrbcj, -
      19, -, xk5oqy8h, no
      20, Uuhapiili, nfkvwtlp, no
      21, Mdqcusyhf, 253n4b9d, yes
      22, Pvvnevmhz, frmk6v0n, no
      23, -, 6uy2oa4q, no
      24, -, 1q5tckse, -
      25, -, ksdjp0mb, no
      26, -, bo29puw4, yes
      27, -, viob0e6m, -
      28, Gvvycnszs, wtl4borq, yes
      29, -, go9hs3rf, no
      30, Wpvkrlrxx, 0f91zxew, yes
      31, Uzjownwcq, 3xrco765, -
      32, Dqkskpeag, a6xhju4f, yes
      33, Sizgljooj, 9214hieo, -
      34, -, fbso36p0, no
      35, -, sa0heglo, no
      36, -, v36q7wd2, -
      37, -, e529j7yv, no
      38, Uzlbrxqhl, mxoalq2t, -
      39, Hljaiqkhe, pc78ktiz, -
      40, -, iryc1m42, -
      41, Ddwjqvuxs, pea9un10, -
      42, -, 4zyvwa8b, -
      43, Gtrpwbtbx, kfp2wq1z, no
      44, Lquvnqxem, 9vqg0r3y, no
      45, Zlfzckynm, jcpat27s, -
      46, -, iyjql3nb, yes
      47, -, n63tz9am, -
      48, -, 2cfs7y14, no
      49, -, c3v4mfk1, -
      50, -, zg3s0bjr, yes
      51, Ajjidacbt, ol4hut76, yes
      52, Zlvpmyoag, kgmp0839, -
      53, Smowvdtne, 1gsvtxnk, yes
      54, Fffeneiqq, h9flv8ot, -
      55, Swupvrbhn, t3gs7wqo, yes
      56, -, 16igxrf5, no
      57, -, 7und8c2f, no
      58, Aekxkubpk, ndk5lm9a, no
      59, Ufmzxzkxe, ey9i20un, no
      60, Qlaqzkeyv, u9fgosa7, -
      61, -, k32i1fpw, no
      62, -, i8d1vyg3, no
      63, -, gc4lwn05, yes
      64, -, ti30szc7, yes
      65, -, olfdbxzw, yes
      66, Twgjuwfds, a5c0rmbv, yes
      67, Mmhzzvnfq, 2he56kuz, no
      68, Mywpkgnif, qklvj34m, yes
      69, Wjsxyjynw, x5odv0si, no
      70, Jkhzmyows, z3sm72ku, no
      71, Dnefimhpt, jckh3la5, no
      72, Muxwiuhhf, sbc43jo1, no
      73, -, gqb8pu17, -
      74, Ibsyoonin, y6789gv3, yes
      75, Uxjeiojvl, mra3vj48, yes
      76, -, i0nh9tdp, no
      77, -, vhfnso7m, -
      78, Ouaiysqvu, y3akwle5, yes
      79, -, vy40fixm, -
      80, -, 7wesx8qg, no
      81, Efkzpikuf, alxziruy, -
      82, -, 3dwgfr47, no
      83, -, da6lu9rx, -
      84, -, taxurcpv, no
      85, -, t8xp0s7r, -
      86, Rcthnalow, 6x9p5goj, -
      87, Ggirmjwqo, h23cg71k, yes
      88, -, p5q2az1j, yes
      89, -, undl5b83, no
      90, Nvbxkoram, sdv9leiy, -
      91, Cefachhom, aqpo09ln, -
      92, -, 7rn6y130, no
      93, Ewvmjukzi, qra7fe2t, -
      94, -, kxagpohq, yes
      95, Yqfsxiuhr, 95mt8rwy, no
      96, -, va4bk7ow, yes
      97, -, 8u9xzb1o, -
      98, Lbivnpxga, frgmbou7, yes
      99, -, khbjztws, yes
      100, -, kid4gofw, -
    learner_created: false
  - name: main.js
    visible: true
    text: // write your code here
    learner_created: false
  - name: tests.py
    visible: false
    text: |
      from test.tests import Test
      
      if __name__ == '__main__':
          Test().run_tests()
    learner_created: false
feedback_link: https://hyperskill.org/learn/step/25696#comment
check_profile: hyperskill_node_javascript
status: Solved
feedback:
  message: <html>Correct solution</html>
  time: "Wed, 17 Jan 2024 18:03:03 UTC"
record: 1
